generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Job {
  id            String           @id @default(uuid())
  title         String
  company       String?
  location      String?
  type          String?
  salary        String?
  description   String?          @db.Text
  requirements  String?          @db.Text
  benefits      String?          @db.Text
  postedDate    DateTime        @default(now())
  lastDate      DateTime?
  isActive      Boolean         @default(true)
  noOfVacancies Int?
  applications  JobApplication[]
}

model JobApplication {
id            String           @id @default(uuid())
  fullName        String
  fatherName      String
  domicile        String
  email           String
  phone           String
  cnic            String
  photoPath       String
  nocPath         String?
  cvPath          String?  
  qualifications  Json     @db.Json
  certifications  Json     @db.Json
  workExperience  Json     @db.Json
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  job             Job      @relation(fields: [jobId], references: [id])
  jobId           String   
  userId          String?  
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model DownloadCategory {
  id          String     @id @default(cuid())
  name        String
  parentId    String?
  parent      DownloadCategory?  @relation("SubCategories", fields: [parentId], references: [id], onDelete: SetNull)
  subCategories DownloadCategory[] @relation("SubCategories")
  downloads   Download[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Download {
  id          String         @id @default(cuid())
  title       String
  description String?
  fileName    String
  filePath    String
  fileSize    Int
  fileType    String
  categoryId  String?
  category    DownloadCategory? @relation(fields: [categoryId], references: [id])
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  createdBy   String        // User ID who uploaded the file
}